import os
import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.types import ChatMemberUpdated
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- 1) –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
TOKEN = os.getenv('API_TOKEN')
if not TOKEN:
    exit("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω API_TOKEN –≤ .env")

# --- 2) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- 4) –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–π–ª–æ–≤–∞—è ¬´–ë–î¬ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---
class MemberDatabase:
    def __init__(self, path="members.db"):
        self.path = path
        self.data = {}  # { chat_id_str: { user_id_str: {username,first_name,last_name} } }
        self._ensure_file()
        self.load()

    def _ensure_file(self):
        if not os.path.exists(self.path):
            open(self.path, "w", encoding="utf-8").close()
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ë–î: {self.path}")

    def load(self):
        try:
            with open(self.path, "r", encoding="utf-8") as f:
                for line in f:
                    chat_id, user_id, username, first_name, last_name = line.strip().split("|")
                    self.data.setdefault(chat_id, {})[user_id] = {
                        "username": username,
                        "first_name": first_name,
                        "last_name": last_name
                    }
            logger.info(f"–ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–∞: —á–∞—Ç–æ–≤={len(self.data)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")

    def save(self):
        try:
            with open(self.path, "w", encoding="utf-8") as f:
                for chat_id, users in self.data.items():
                    for uid, u in users.items():
                        f.write(f"{chat_id}|{uid}|{u['username']}|{u['first_name']}|{u['last_name']}\n")
            logger.info("–ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

    def add(self, chat_id: str, user: types.User):
        chat = str(chat_id)
        uid = str(user.id)
        self.data.setdefault(chat, {})[uid] = {
            "username": user.username or "",
            "first_name": user.first_name or "",
            "last_name": user.last_name or ""
        }
        self.save()
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω user={uid} –≤ chat={chat}")

    def get(self, chat_id: str) -> dict:
        return self.data.get(str(chat_id), {})

    def clear(self, chat_id: str):
        chat = str(chat_id)
        if chat in self.data:
            del self.data[chat]
            self.save()
            logger.info(f"–û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è chat={chat}")

db = MemberDatabase()

# --- 5) –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
        "1) /scan ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞.\n"
        "2) –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø–∏—à–µ—Ç –∏–ª–∏ –≤—Å—Ç—É–ø–∞–µ—Ç.\n"
        "3) /all ‚Äî —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö."
    )

# --- 6) –ö–æ–º–∞–Ω–¥–∞ /scan ---
@dp.message(Command("scan"))
async def cmd_scan(msg: types.Message):
    if msg.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    chat_id = msg.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞
    admins = await bot.get_chat_administrators(chat_id=chat_id)
    me = await bot.get_me()
    if not any(adm.user.id == me.id for adm in admins):
        await msg.reply("‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    db.clear(chat_id)
    for adm in admins:
        db.add(chat_id, adm.user)

    await msg.reply(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(admins)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

# --- 7) –ö–æ–º–∞–Ω–¥–∞ /all: —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö ---
@dp.message(Command("all"))
async def cmd_all(msg: types.Message):
    if msg.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    chat_str = str(msg.chat.id)
    members = db.get(chat_str)
    if not members:
        await msg.reply("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –°–¥–µ–ª–∞–π—Ç–µ /scan –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    mentions = []
    for uid, u in members.items():
        if u["username"]:
            mentions.append(f"@{u['username']}")
        else:
            name = (u["first_name"] + " " + u["last_name"]).strip()
            mentions.append(f'<a href="tg://user?id={uid}">{name}</a>')

    # –®–ª—ë–º –ø–æ 15 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    parts = [mentions[i:i+15] for i in range(0, len(mentions), 15)]
    for i, chunk in enumerate(parts, 1):
        await msg.reply(
            f"üîî –í—Å–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ! ({i}/{len(parts)})\n" + " ".join(chunk),
            parse_mode="HTML"
        )

# --- 8) –ê–≤—Ç–æ—Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ ---
@dp.message()
async def on_message(msg: types.Message):
    if msg.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
        db.add(msg.chat.id, msg.from_user)

# --- 9) –ê–≤—Ç–æ—Å–±–æ—Ä –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏/—Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ ---
@dp.chat_member()
async def on_chat_member(update: ChatMemberUpdated):
    status = update.new_chat_member.status
    if status in ("member", "administrator", "creator"):
        db.add(update.chat.id, update.new_chat_member.user)

# --- 10) –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ---
async def on_startup():
    logger.info("üîπ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    logger.info("üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–î –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
    db.save()
    logger.info("üîπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üîπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞: {e}")
